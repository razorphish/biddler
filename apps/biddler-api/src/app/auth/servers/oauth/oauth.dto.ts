import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { IsOptional, IsString } from 'class-validator';

export class FilterTokenDTO {
  @ApiProperty({
    description:
      'Oauth grant types (implicit, password, client_credentials, authorization_code, refresh_token, urn:ietf:params:oauth:grant-type:device_code',
    example: 'password'
  })
  @IsString()
  public grant_type: string;

  @ApiPropertyOptional({
    description: 'Unique identifier of the client application.',
    example: 'c1160f72-779d-4627-af24-03994338d4c9'
  })
  @IsString()
  @IsOptional()
  public client_id?: string;

  @ApiPropertyOptional({
    description:
      'The client secret value; this value identifies the client with the provider. Can be sent as Authorization header. Also, not needed for public client, even if Authorization header is not sent.',
    example: '3NgzNrfa2ZFkPK39aqXeXz9RbbnDE+Y2arS4pme/h5I='
  })
  @IsString()
  @IsOptional()
  public client_secret?: string;

  @ApiPropertyOptional({
    description: 'Refresh Token grant type only: The refresh token.',
    example: 'false'
  })
  @IsOptional()
  @IsString()
  public refresh_token?: string;

  @ApiPropertyOptional({
    description:
      'OAuth 2.0: standard scope parameter. One or more scopes configured in the OAuth provider. Space separator for multiple scopes.  The scope of the access request.',
    example: '*'
  })
  @IsOptional()
  @IsString()
  public scope?: string;

  @ApiPropertyOptional({
    description:
      'Authorization Code grant type only: The authorization code that was previously received by the client application.',
    example: 'false'
  })
  @IsOptional()
  @IsString()
  public code?: string;

  @ApiPropertyOptional({
    description:
      'Authorization Code grant type only: The redirect URI of the client application, where it received the authorization code.',
    example: 'active'
  })
  @IsString()
  @IsOptional()
  public redirect_uri?: string;

  @ApiPropertyOptional({
    description: 'Resource Owner Password Credentials only: The resource owners username.',
    example: 'antonio@maras.co'
  })
  @IsString()
  @IsOptional()
  public username?: string;

  @ApiPropertyOptional({
    description: 'Resource Owner Password Credentials only: The resource owners password.',
    example: '7jh%5a$)DC@&0n3'
  })
  @IsString()
  @IsOptional()
  public password?: string;

  @ApiPropertyOptional({
    description:
      'JWT Bearer Assertion grant type only: The format of the assertion as identified by the Authorization Server. The value must be set to urn:ietf:params:oauth:client-assertion-type:jwt-bearer.',
    example: 'active'
  })
  @IsString()
  @IsOptional()
  public client_assertion_type?: string;

  @ApiPropertyOptional({
    description:
      'JWT Bearer Assertion grant type only: The assertion being used to authenticate the client. Only JWT compact serialization is allowed.',
    example: 'active'
  })
  @IsString()
  @IsOptional()
  public client_assertion?: string;

  @ApiPropertyOptional({
    description: 'JWT Bearer Assertion grant type only: The JWT Bearer Assertion.',
    example: 'active'
  })
  @IsString()
  @IsOptional()
  public assertion?: string;

  @ApiPropertyOptional({
    description:
      'Used for PKCE support, when using Authorization Code grant type with PKCE. The code verifier is a string (40â€“128 characters) generated by the client. For more information on PKCE, see PKCE support with the Authorization Code grant type.',
    example: 'active'
  })
  @IsString()
  @IsOptional()
  public code_verifier?: string;
}
